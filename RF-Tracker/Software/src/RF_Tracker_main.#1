/*------------------------------------------------------------------------------
 *                          Silicon Laboratories, Inc.
 *                           http://www.silabs.com
 *                               Copyright 2010
 *------------------------------------------------------------------------------
 *
 *    FILE:       tone_demo_main.c
 *    TARGET:     Si4010
 *    TOOLCHAIN:  Generic
 *    DATE:       January 18, 2023, Wednesday
 *    RELEASE:    2.1 (MPech), ROM version 02.00, trim 3
 *
 *------------------------------------------------------------------------------
 *
 *    DESCRIPTION:
 *      This file contains the main function for the tone demo.
 *      It MUST be run on properly trim part!
 *
 *      Then it tracks frequency with temperature by fine tuning
 *      process by repeatedly calling the vStl_SingleTxLoop() function.
 *      Ultimately, if the temperature is going to drift too much
 *      from what it was during the main tuning vFCast_Tune()
 *      call then the fine tuning process will not be able
 *      to properly track the output frequency with temperature.
 *
 *      For an example how to interrupt to CW tone output after
 *      predefined time, retune by vFCast_Tune(), and start transmitting
 *      tone again see the tone_demo_ptune_main.c for periodic tuning.
 *
 *------------------------------------------------------------------------------
 *
 *    INCLUDES:
 */
#include <stdlib.h>
#include "si4010.h"
#include "si4010_api_rom.h"

#include "RF_Tracker.h"


/*------------------------------------------------------------------------------
 *
 *    FUNCTION DESCRIPTION:
 *      Main function for the example.
 *
 *------------------------------------------------------------------------------
 */

void    main(void)
{

//Set DMD interrupt to high priority,
// any other interrupts have to stay low priority
  PDMD=1;
// Disable the Matrix and Roff modes 
  PORT_CTRL &= ~(M_PORT_MATRIX | M_PORT_ROFF | M_PORT_STROBE);
  PORT_CTRL |=  M_PORT_STROBE;
  PORT_CTRL &= ~M_PORT_STROBE;

  /* clear master time */
  vSys_SetMasterTime( 0UL );

  // button setup
  bsrSetup.bButtonMask = (1 << B_GPIO2);
  bsrSetup.pbPtsReserveHead = (BYTE *) ptsArray;
  bsrSetup.bPtsSize = PTS_SIZE;
  bsrSetup.bPushQualThresh = 3;

  vBsr_Setup(&bsrSetup);

  /* Setup the RTC to tick every 5ms and clear it. Keep it disabled. */
  RTC_CTRL = (0x07 << B_RTC_DIV) | M_RTC_CLR;

  RTC_CTRL |= M_RTC_ENA;
  /* Enable the RTC interrupt and global interrupt enable */
  ERTC = 1;
  EA = 1;

// LED control bit off 
  GPIO_LED = 0;

// Enable Power LED
  GPIO1 = 1;
// Disable Channel LED
  GPIO8 = 0;

  // state vars
  holdStart = 0;
  changingChannel = 0;

  mode = 0;

  channel = 1;
  readback = 1;

// Call the system setup. This just for initialization.
// Argument of 1 just configures the SYS module such that the
// bandgap can be turned off if needed.  
  vSys_Setup( 1 );

// Setup the bandgap for working with the temperature sensor here.
// bSys_FirstBatteryInsertWaitTime set to non zero value. 
  vSys_BandGapLdo( 1 );

// PA setup.
// fAlpha and fBeta has to be set based on antenna configuration.
// Chose a PA level and nominal cap. Both values come from
// the calculation spreadsheet. 
  rPaSetup.fAlpha      = 0.0;
  rPaSetup.fBeta       = 0.3387;
  rPaSetup.bLevel      = 36;
  rPaSetup.wNominalCap = 10;
  rPaSetup.bMaxDrv     = 0;

// PA setup 
  vPa_Setup( &rPaSetup );

// ODS setup .. results from calculation spreadsheet.
// Set to 1kbps OOK 
  rOdsSetup.bModulationType = 0; // 1 .. FSK, 0 .. OOK 
  rOdsSetup.bClkDiv         = 5;
  rOdsSetup.bEdgeRate       = 0;

// Set group width to 7, which means 8 bits/encoded byte to be transmitted.
// The value must match the output width of the data encoding function
// set by the vStl_EncodeSetup() below. 
  rOdsSetup.bGroupWidth     = 7;
  rOdsSetup.wBitRate        = 4000;  // 1kbps 

// Configure the warm up intervals LC: 8, DIV: 5, PA: 4 
  rOdsSetup.bLcWarmInt  = 8;
  rOdsSetup.bDivWarmInt = 5;
  rOdsSetup.bPaWarmInt  = 4;

// ODS setup 
  vOds_Setup( &rOdsSetup );

// Setup the STL encoding for none. No encode function therefore we
// leave the pointer at NULL. 
  vStl_EncodeSetup( bEnc_NoneNrz_c, NULL );

// Generate the frame to use. Example array is fixed in CODE
// as constant for this example. Assign the beginning of the array
// to the pbFrameHead pointer. 
  pbFrameHead = (BYTE xdata *) abTone_FrameArray;

// Setup frequency casting .. needed to be called once per boot 
  vFCast_Setup();

// Run at 216.xxx MHz.  Continue to tune frequency between frames.
// This is not absolutely necessary as the Single transmission loop
// also adjusts for temperature drift. It calculate values used by
// the vStl_SingleTxLoop() during transmission. Input is in [Hz]. 
  vFCast_Tune( FREQUENCY + (channel * CHANNEL_SEP) );

// Call vFCast_FskAdj with the maximum FSK adjustment.
// Input parameter value comes from the calculation spreadsheet.
// We are not running FSK for tone. 

// Now wait until there is a demodulated temperature sample  
  while ( 0 == bDmdTs_GetSamplesTaken() ){}

// Tune the PA with the current temperature as an argument 
  vPa_Tune( iDmdTs_GetLatestTemp() );

// -- Run the Single Tx Loop 
  vStl_PreLoop( );

// Encoding is none .. 0. Force first byte to turn the PA on.
// Set the all 1's output if there is no data .. value 3 below. 
  ODS_CTRL = (ODS_CTRL & (~M_ODS_SHIFT_CTRL)) | (3 << B_ODS_SHIFT_CTRL);

// Infinite loop, we are sending packets every second on the specified channel
  while ( 1 )
  {	
  	// button handling
	if (bBsr_GetPtsItemCnt()) {
		ptsButton = wBsr_Pop();

		// get the current button state, masking 0x04 for the button on GPIO2
		// the if statements are inversed because the GPIO pin is pulled HIGH when the button is pressed,
		// not LOW as the documentation indicates it should be.
		buttonState = *((BYTE*)(&ptsButton)+1);
		if (!(buttonState & 0x04)) {
			// record the hold start time
			holdStart = lSys_GetMasterTime() / 1000;
		} else if (buttonState & 0x04) {
			// once we let go, check to see if we should transition to channel select mode
			switch(mode) {
			case MODE_START_CHANNEL_SELECT:
				// update the mode
				mode = MODE_CHANNEL_SELECT;
				// reset channel
				channel = 0;
				break;
			case MODE_STOP_CHANNEL_SELECT:
				// make sure channel is at least 1
				if (channel == 0) channel++;

				// readback the channel & retune the transmitter
				readbackChannel();
  				vFCast_Tune( FREQUENCY + (channel * CHANNEL_SEP) );

				// update the mode
				mode = MODE_TRANSMIT;

				break;
			case MODE_CHANNEL_SELECT: // if we are in channel select, update the channel if we short-press
				channel++;
				break;
			case MODE_TRANSMIT: // if we are in transmit mode, readback the channel if we short-press
				readbackChannel();
				break;
 			default:
				break;
			}
		}
	} else {
		buttonState = 0;
	}

	// we've held the button for 5 seconds, change the mode
	if (holdStart - lSys_GetMasterTime()/1000 <= -5) {
		switch(mode) {
		case MODE_TRANSMIT:
			mode = MODE_START_CHANNEL_SELECT;
			holdStart = 0;
			break;
		case MODE_CHANNEL_SELECT:
			mode = MODE_STOP_CHANNEL_SELECT;
			holdStart = 0;
			break;
		default:
			break;
		}
	}

	// if we are transmitting
	if (mode == MODE_TRANSMIT) {
	  	// beep for one second, also turn LED on
		if ((lSys_GetMasterTime() / 1000) % 2 == 0){
		    vStl_SingleTxLoop( pbFrameHead,
		                       2 );  // Frame length in bytes 
		    GPIO3 = 1;
		}
		else {
			// turn LED off for one second
			GPIO3 = 0;
		}
	} else if (mode == MODE_START_CHANNEL_SELECT || mode == MODE_CHANNEL_SELECT) {
		GPIO3 = 0; // turn off transmit LED
		// rapidly flash channel LED to indicate the mode
		if ((lSys_GetMasterTime()/50)%2 == 0) {
			GPIO8=1;
		} else {
			GPIO8=0;
		}
	}
  }

// Infinite termination loop
// never reached, TODO: some way to set the chip into IDLE mode?
  while ( 1 )
  {
    PCON |= M_IDLE;
    PCON = PCON;   // Must be used after going to IDLE 
  }

// This will never happen. 
  return;
}

/**
	Reads back the currently selected channel on the channel LED.
*/
void readbackChannel() {
	readback = 0; // current readback tick
	canInc = 1; // used for delay
	GPIO3 = 0; // turn transmit led off
	while (lSys_GetMasterTime() % 1000 != 0); // prevents issues where the LED flashes too quickly
	while (readback <= channel) { // while the readback tick has not reached the current channel
		if ((lSys_GetMasterTime() / 250) % 2 == 0) { // run while we are on the 2nd or 4th quarter second
			GPIO8 = 1;
			if (canInc) { // toggle to prevent incrementing readback more than once per tick
				readback++;
				canInc = 0;
			}
		} else {
			GPIO8 = 0;
			canInc = 1;
		}
	}
	GPIO8 = 0;
	return;
}

//------------------------------------------------------------------------------


